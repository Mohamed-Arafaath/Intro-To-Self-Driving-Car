import numpy as np

# A 4x5 robot world of characters 'o' and 'b'
world = np.array([ ['o', 'b', 'o', 'o', 'b'],
                   ['o', 'o', 'b', 'o', 'o'],
                   ['b', 'o', 'o', 'b', 'o'],
                   ['b', 'o', 'o', 'o', 'o'] ])

# Sensor measurement
measurement = ['b', 'o']

# This function takes in the world and the sensor measurement.
# Complete this function so that it returns the indices of the 
# likely robot locations, based on matching the measurement 
# with the color patterns in the world

def find_match(world, measurement):
    #Empty list
    possible_locations = []
    #iterate through rows
    for i in range(world.shape[0]):
        #iterate through column
        for j in range(world.shape[1]):
        """comparing
        ->((world[i][j]  == measurement[0])i.e the colour of the cell under robot 
                            and the 1st index of measurement 
        ->(world[i][j+1] == measurement[1])i.e the colour of the cell near robot 
                             and the 2nd index of measurement"""
            if j < world.shape[1] - 1:
              if ((world[i][j] == measurement[0]) & (world[i][j+1] == measurement[1]) ):
                  #if the condition is true,append the index to the empty list
                  possible_locations.append([i,j])
 
    
    
    
    ## TODO: Iterate through the world 
    ## Look at two adjacent indices at a time - the square the robot is 
    ## on top of and the square to its right
    ## (Making sure not to go past the bounds of the world)
    
    ## TODO: If two adjacent colors in the world match 
    ## the two colors in the sensor measurement
    ## Add those indices to the possible_locations list
    ## Append them in the format [row_index, column_index], i.e. [0, 0]
    
    return possible_locations
   

# This line runs the function and stores the output - do not delete 
locations = find_match(world, measurement)
